There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:

Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).



Example 1:

Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1).
Example 2:

Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.
Example 3:

Input: rating = [1,2,3,4]
Output: 4

Link : https://leetcode.com/problems/count-number-of-teams/discuss/554795/C%2B%2BJava-O(n-*-n)-and-O(n-log-n)
c++ ile O(n) olan çözüm var

-----------------------------
Complexity Analysis

Time: O(n * n)
Memory: O(1)
---------------
public int numTeams(int[] rating) {
    int res = 0;
    for (int i = 1; i < rating.length - 1; ++i) {
        int less[] = new int[2], greater[] = new int[2];
        for (int j = 0; j < rating.length; ++j) {
            if (rating[i] < rating[j])
                ++less[j > i ? 1 : 0];
            if (rating[i] > rating[j])
                ++greater[j > i ? 1 : 0];
        }
        res += less[0] * greater[1] + greater[0] * less[1];
    }
    return res;
}