Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level x such that the sum of all the values of nodes at level x is maximal.

Input: root = [1,7,0,7,-8,null,null]
Output: 2
Explanation:
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.

Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]
Output: 2

--------------------

Time & space: O(n), n is the number of total nodes.
--------------------
class Solution {
    public int maxLevelSum(TreeNode root) {
        int maxSum = Integer.MIN_VALUE;
        int maxLevel = 1; int nowLevel = 1;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);

        while(!q.isEmpty()){
            int sum = 0;
            for(int i=q.size(); i>0; --i){
                TreeNode curr = q.poll();
                sum += curr.val;
                if(curr.left!=null)
                    q.offer(curr.left);
                if(curr.right!=null)
                    q.offer(curr.right);
            }
                if(sum>maxSum){
                    maxSum = sum;
                    maxLevel = nowLevel;
                }

            nowLevel ++;
        }

        return maxLevel;
    }
}

--------------------
BFS->

 public int maxLevelSum(TreeNode root) {
        int max = Integer.MIN_VALUE, maxLevel = 1;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        for (int level = 1; !q.isEmpty(); ++level) {
            int sum = 0;
            for (int sz = q.size(); sz > 0; --sz) {
                TreeNode n = q.poll();
                sum += n.val;
                if (n.left != null) {
                    q.offer(n.left);
                }
                if (n.right != null) {
                    q.offer(n.right);
                }
            }
            if (max < sum) {
                max = sum;
                maxLevel = level;
            }
        }
        return maxLevel;
    }

    ----------------------
    DFS->

      public int maxLevelSum(TreeNode root) {
            List<Integer> list = new ArrayList<>();
            dfs(root, list, 0);
            return 1 + IntStream.range(0, list.size()).reduce(0, (a, b) -> list.get(a) < list.get(b) ? b : a);
        }
        private void dfs(TreeNode n, List<Integer> l, int level) {
            if (n == null) { return; }
            if (l.size() == level) { l.add(n.val); } // never reach this level before, add first value.
            else { l.set(level, l.get(level) + n.val); } // reached the level before, accumulate current value to old value.
            dfs(n.left, l, level + 1);
            dfs(n.right, l, level + 1);
        }



        -----
        int maxLevel = 0;
                for (int i = 0; i < list.size(); ++i) {
                    if (list.get(maxLevel) < list.get(i)) {
                        maxLevel = i;
                    }
                }
                return maxLevel + 1;