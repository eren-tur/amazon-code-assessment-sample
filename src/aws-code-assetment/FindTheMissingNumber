Problem Statement
You are given an array of positive numbers from 1 to n, such that all numbers from 1 to n are present except one number ‘x’. You have to find ‘x’. The input array is not sorted.

For example, let’s look at the below array.
----

  Runtime Complexity: Linear, O(n)O(n)

  Memory Complexity: Constant, O(1)O(1)
----
  A naive solution is to simply search for every integer between 1 and n in the input array, stopping the search as soon as there is a missing number. But we can do better. Here is a linear, O(n)O(n), solution that uses the arithmetic series sum formula.​​ Here are the steps to find the missing number:

  Find the sum sum_of_elements of all the numbers in the array. This would require a linear scan, O(n)O(n).
  Then find the sum expected_sum of first n numbers using the arithmetic series sum formula
  The difference between these i.e. expected_sum - sum_of_elements, is the missing number in the array.

  ---

  static int find_missing(List<Integer> input) {
      // calculate sum of all elements
      // in input list
      int sum_of_elements = 0;
      for (Integer x : input) {
        sum_of_elements += x;
      }

      // There is exactly 1 number missing
      int n = input.size() + 1;
      int actual_sum = (n * ( n + 1 ) ) / 2;
      return actual_sum - sum_of_elements;
    }